#!/usr/bin/env python3
"""
Simple test server to validate the backend architecture
This uses only built-in Python modules (no Flask required)
"""

import http.server
import socketserver
import json
import urllib.request
import urllib.parse
from urllib.error import URLError

class TestHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            response = {"status": "healthy", "service": "AI Governance Tool Test Backend"}
            self.wfile.write(json.dumps(response).encode())
        else:
            self.send_response(404)
            self.end_headers()

    def do_POST(self):
        if self.path == '/llm':
            # Handle preflight CORS request
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Access-Control-Allow-Methods', 'POST, OPTIONS')
            self.send_header('Access-Control-Allow-Headers', 'Content-Type')
            self.end_headers()
            
            # Read request data
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            request_data = json.loads(post_data.decode('utf-8'))
            
            # Mock response (simulating HuggingFace API response)
            mock_response = {
                "choices": [{
                    "message": {
                        "content": f"Mock AI response for prompt: '{request_data.get('prompt', '')[:50]}...'. This would be generated by {request_data.get('model', 'unknown-model')} in a real backend."
                    }
                }]
            }
            
            self.wfile.write(json.dumps(mock_response).encode())
        else:
            self.send_response(404)
            self.end_headers()

    def do_OPTIONS(self):
        # Handle preflight CORS request
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'POST, GET, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()

def run_test_server():
    PORT = 5000
    Handler = TestHandler
    
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        print(f"Test backend server running at http://localhost:{PORT}")
        print("Endpoints available:")
        print(f"  GET  http://localhost:{PORT}/health")
        print(f"  POST http://localhost:{PORT}/llm")
        print("\nThis is a MOCK backend for testing the integration.")
        print("It returns fake AI responses, not real HuggingFace API calls.")
        print("\nPress Ctrl+C to stop")
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("\nStopping test server...")

def test_client():
    """Test client to verify the backend works"""
    print("Testing backend endpoints...")
    
    # Test health endpoint
    try:
        response = urllib.request.urlopen('http://localhost:5000/health', timeout=5)
        health_data = json.loads(response.read().decode('utf-8'))
        print(f"✅ Health check: {health_data}")
    except URLError:
        print("❌ Health check failed - is server running?")
        return
    
    # Test LLM endpoint
    try:
        test_data = {
            "prompt": "What is artificial intelligence?",
            "model": "test-model",
            "max_tokens": 50,
            "temperature": 0.7
        }
        
        data = json.dumps(test_data).encode('utf-8')
        req = urllib.request.Request('http://localhost:5000/llm',
                                   data=data,
                                   headers={'Content-Type': 'application/json'})
        
        response = urllib.request.urlopen(req, timeout=10)
        result = json.loads(response.read().decode('utf-8'))
        
        print(f"✅ LLM endpoint test successful")
        print(f"   Response: {result['choices'][0]['message']['content'][:100]}...")
        
    except Exception as e:
        print(f"❌ LLM endpoint test failed: {e}")

if __name__ == "__main__":
    import sys
    if len(sys.argv) > 1 and sys.argv[1] == "test":
        test_client()
    else:
        run_test_server()